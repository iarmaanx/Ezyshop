// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid()) @map("_id")
  mobileNumber String  @unique
  name         String?

  email String? @unique
  otp   String?
  role  String  @default("user")
  // addresses     Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // orders        Order[]
  // wishlist      Product[]
}

model Seller {
  id String @id @default(uuid()) @map("_id")

  name            String?
  storeName       String
  storeAddress    String
  storeUPI        String
  storeMobile     String  @unique
  storeDescription String @default("A store")

  email      String?     @unique
  otp        String?
  role       String      @default("seller")
  // addresses     Address[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // orders        Order[]
  // wishlist      Product[]
  billboards Billboard[] @relation("SellerToBillboard")
  categories Category[]  @relation("SellerToCategory")
  products   Product[]   @relation("SellerToProduct")
}

model Billboard {
  id         String     @id @default(uuid()) @map("_id")
  storeId    String
  seller     Seller     @relation("SellerToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String    @id @default(uuid()) @map("_id")
  storeId     String
  seller      Seller    @relation("SellerToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id String @id @default(uuid()) @map("_id")

  storeId String
  seller  Seller @relation("SellerToProduct", fields: [storeId], references: [id])

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  name        String
  price       Int
  description String
  quantity    Int
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images Image[]
}

model Image {
  id String @id @default(uuid()) @map("_id")

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
